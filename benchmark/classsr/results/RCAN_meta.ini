classSR_3class_rcan(
  (classifier): Classifier(
    (lastOut): Linear(in_features=32, out_features=3, bias=True)
    (CondNet): Sequential(
      (0): Conv2d(3, 128, kernel_size=(4, 4), stride=(4, 4))
      (1): LeakyReLU(negative_slope=0.1, inplace=True)
      (2): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (3): LeakyReLU(negative_slope=0.1, inplace=True)
      (4): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (5): LeakyReLU(negative_slope=0.1, inplace=True)
      (6): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      (7): LeakyReLU(negative_slope=0.1, inplace=True)
      (8): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
    )
    (avgPool2d): AvgPool2d(kernel_size=8, stride=8, padding=0)
  )
  (net1): RCAN(
    ; (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (sub_mean): Conv2d(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Sequential(
      (0): Conv2d(3, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (body): Sequential(
      (0-9): ResidualGroup(
        (body): Sequential(
          (0-19): RCAB(
            (body): Sequential(
              (0): Conv2d(36, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(36, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): CALayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (conv_du): Sequential(
                  (0): Conv2d(36, 2, kernel_size=(1, 1), stride=(1, 1))
                  (1): ReLU(inplace=True)
                  (2): Conv2d(2, 36, kernel_size=(1, 1), stride=(1, 1))
                  (3): Sigmoid()
                )
                (matmul) -> input * conv_du: TODO
              )
            )
            (add) -> body + input: TODO
          )
          (20): Conv2d(36, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (add) -> body + input: TODO
      )
      (10): Conv2d(36, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add) -> head + body: TODO
    (tail): Sequential(
      (0): Upsampler(
        (0): Conv2d(36, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
        (2): Conv2d(36, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): PixelShuffle(upscale_factor=2)
      )
      (1): Conv2d(36, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
  (net2): RCAN(
    ; (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (sub_mean): Conv2d(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Sequential(
      (0): Conv2d(3, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (body): Sequential(
      (0-9): ResidualGroup(
        (body): Sequential(
          (0-19): RCAB(
            (body): Sequential(
              (0): Conv2d(50, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(50, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): CALayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (conv_du): Sequential(
                  (0): Conv2d(50, 3, kernel_size=(1, 1), stride=(1, 1))
                  (1): ReLU(inplace=True)
                  (2): Conv2d(3, 50, kernel_size=(1, 1), stride=(1, 1))
                  (3): Sigmoid()
                )
                (matmul) -> input * conv_du: TODO
              )
            )
            (add) -> body + input: TODO
          )
          (20): Conv2d(50, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (add) -> body + input: TODO
      )
      (10): Conv2d(50, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add) -> head + body: TODO
    (tail): Sequential(
      (0): Upsampler(
        (0): Conv2d(50, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
        (2): Conv2d(50, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): PixelShuffle(upscale_factor=2)
      )
      (1): Conv2d(50, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
  (net3): RCAN(
    ; (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (sub_mean): Conv2d(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (body): Sequential(
      (0-9): ResidualGroup(
        (body): Sequential(
          (0-19): RCAB(
            (body): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): CALayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (conv_du): Sequential(
                  (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                  (1): ReLU(inplace=True)
                  (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                  (3): Sigmoid()
                )
                (matmul) -> input * conv_du: TODO
              )
            )
            (add) -> body + input: TODO
          )
          (20): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (add) -> body + input: TODO
      )
      (10): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add) -> head + body: TODO
    (tail): Sequential(
      (0): Upsampler(
        (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
        (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): PixelShuffle(upscale_factor=2)
      )
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
  (scatter_router): ScatterRouter(
    (protocol): TopKProtocol()
    (fabric): DispatchFabric()
  )
  (gather_router): GatherRouter(
    (fabric): CombineFabric()
  )
)


  ; (\(net\d\): RCAN\()
  ;   (\(sub_mean\).*)
  ;   (\(add_mean\).*)
  ;   (\(head\)(?:.+\n)+?.+)
  ;   (\(body\)(?:.+\n)+?.+)
  ;   (\(tail\)(?:.+\n)+?.+)
  ; \)

  ;   $1
  ;   $2
  ;   $4
  ;   $5
  ;   (add) -> head + body: TODO
  ;   $6
  ;   $3
  ; )