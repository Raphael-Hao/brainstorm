#include <cuda_runtime.h>

#define __dtype @dtype@

extern "C" __global__ __launch_bounds__(1024) void execute(__dtype* __restrict__ gates1_s,
                                                           int* __restrict__ indices1_s,
                                                           int* __restrict__ locations1_s,
                                                           __dtype* __restrict__ reshaped_input,
                                                           __dtype* __restrict__ dispatched_input,
                                                           int samples, int hidden, int capacity) {
  // [thread_extent] blockIdx.x = 512
  // [thread_extent] threadIdx.x = 1024

  for (int i = blockIdx.x; i < samples; i += gridDim.x)
    if (locations1_s[i] < capacity && indices1_s[i] >= 0) {
#pragma unroll
      for (int j = threadIdx.x; j < hidden; j += 1024)
        atomicAdd(&dispatched_input[(indices1_s[i] * capacity + locations1_s[i]) * (hidden) + j],
                  gates1_s[i] * reshaped_input[i * (hidden) + j]);
    }
}